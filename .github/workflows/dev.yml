name: CI/CD Pipeline - Dev

on:
  push:
    branches:
      - dev

env:
  AWS_ACCOUNT: "640948219319"
  AWS_REGION: "us-east-1"
  APP_NAME: "linuxtips-app"
  CLUSTER_NAME: "containers-linuxtips"
  REPOSITORY_NAME: "linuxtips/$APP_NAME"


jobs:
  ci-app:
    runs-on: ubuntu-latest
    steps:
    - name: checkout repository
      uses: actions/checkout@v4

    - name: Setup Golang
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
      
    - name: Install Golint
      run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.61.0

    - name: Lint App
      run: golangci-lint run ./... -E errcheck
      working-directory: ./app

    - name: Test App
      run: go test -v ./...
      working-directory: ./app
  
  ci-terraform:
    runs-on: ubuntu-latest
    steps:
    - name: checkout repository
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.7"

    - name: Terraform fmt check
      run: terraform fmt --recursive
      working-directory: ./terraform

    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init -backend-config=./environment/${GITHUB_REF_NAME}/backend.tfvars 
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION:  ${{ env.AWS_REGION }}
      
    - name: Terraform Validate
      working-directory: ./terraform
      env:
        AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION:  ${{ env.AWS_REGION }}
      run: terraform validate
  
  build-publish:
    runs-on: ubuntu-latest
    needs: 
      - ci-app
      - ci-terraform
    steps:
    - name: checkout repository
      uses: actions/checkout@v4
    
    - name: Login ECR Repository
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      env:
        AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION:  ${{ env.AWS_REGION }}
    
    - name: Build Image
      run: docker build -t ${{ env.APP_NAME }} .
      working-directory: ./app

    - name: Create ECR repository if not exists
      run: |
        set +e
        REPO_EXISTS=$(aws ecr describe-repositories --repository-names ${{ env.REPOSITORY_NAME }} 2>&1)
        if [[ $REPO_EXISTS == *"RepositoryNotFoundException"* ]]; then
          echo "Repositório ${{ env.REPOSITORY_NAME }} não encontrado. Criando..."
          aws ecr create-repository --repository-name ${{ env.REPOSITORY_NAME }}
        else
          echo "Repositório ${{ env.REPOSITORY_NAME }} já existe."
        fi
        set -e
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ env.AWS_REGION }}

    - name: Tag Image
      run: docker tag ${{ env.APP_NAME }}:latest ${{ env.AWS_ACCOUNT }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.REPOSITORY_NAME }}:${GITHUB_SHA::8}
      working-directory: ./app

    - name: Publish Image
      run: docker push  ${{ env.AWS_ACCOUNT }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.REPOSITORY_NAME }}:${GITHUB_SHA::8}
      working-directory: ./app

  deploy:
    runs-on: ubuntu-latest
    needs: 
      - build-publish
    steps:
    - name: checkout repository
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.7"

    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init -backend-config=./environment/${GITHUB_REF_NAME}/backend.tfvars 
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION:  ${{ env.AWS_REGION }}

    - name: Terraform Plan
      working-directory: ./terraform
      run: terraform plan -var-file=./environment/${GITHUB_REF_NAME}/terraform.tfvars -var container_image=${{ env.AWS_ACCOUNT }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.REPOSITORY_NAME }}:${GITHUB_SHA::8}
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION:  ${{ env.AWS_REGION }}

    - name: Terraform Apply
      working-directory: ./terraform
      run: terraform apply --auto-approve -var-file=environment/${GITHUB_REF_NAME}/terraform.tfvars -var container_image=${{ env.AWS_ACCOUNT }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.REPOSITORY_NAME }}:${GITHUB_SHA::8}
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION:  ${{ env.AWS_REGION }}
  
  wait-ecs-deploy:
    runs-on: ubuntu-latest
    needs:
      - deploy
    steps:
    - name: checkout repository
      uses: actions/checkout@v4

    - name: ECS Wait Deployment Complete
      run: aws ecs wait services-stable --cluster ${{ env.CLUSTER_NAME }} --services  ${{ env.APP_NAME }}
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION:  ${{ env.AWS_REGION }}      
      

    

    



      


    
    

  

    
